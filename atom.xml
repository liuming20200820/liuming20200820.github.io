<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://data.zz.baidu.com/atom.xml" rel="self"/>
  
  <link href="http://data.zz.baidu.com/"/>
  <updated>2022-01-13T10:44:45.209Z</updated>
  <id>http://data.zz.baidu.com/</id>
  
  <author>
    <name>Mingo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs基础（三）</title>
    <link href="http://data.zz.baidu.com/archives/f3a153ba.html"/>
    <id>http://data.zz.baidu.com/archives/f3a153ba.html</id>
    <published>2022-01-12T11:00:28.000Z</published>
    <updated>2022-01-13T10:44:45.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express-拿到form表单数据"><a href="#express-拿到form表单数据" class="headerlink" title="express 拿到form表单数据"></a>express 拿到form表单数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm i body-parser</span><br><span class="line">var express = require(&#x27;express&#x27;)</span><br><span class="line">var bodyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">// create application/json parser</span><br><span class="line">var jsonParser = bodyParser.json()</span><br><span class="line"></span><br><span class="line">// create application/x-www-form-urlencoded parser</span><br><span class="line">var urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</span><br><span class="line"></span><br><span class="line">// POST /login gets urlencoded bodies</span><br><span class="line">app.post(&#x27;/login&#x27;, urlencodedParser, function (req, res) &#123;</span><br><span class="line">  res.send(&#x27;welcome, &#x27; + req.body.username)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3004)</span><br></pre></td></tr></table></figure><h2 id="静态资源和动态资源"><a href="#静态资源和动态资源" class="headerlink" title="静态资源和动态资源"></a>静态资源和动态资源</h2><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><p>相同请求地址不同相应资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.sfhdjkj.cn/list?id=1</span><br><span class="line">https://www.sfhdjkj.cn/list?id=1</span><br></pre></td></tr></table></figure><h3 id="读取静态资源"><a href="#读取静态资源" class="headerlink" title="读取静态资源"></a>读取静态资源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const express=require(&#x27;express&#x27;)</span><br><span class="line">const app=express()</span><br><span class="line">const path=require(&#x27;path&#x27;)</span><br><span class="line">const fs=require(&#x27;fs&#x27;)</span><br><span class="line">let paths=path.join(__dirname,&quot;/static/public/index.html&quot;)</span><br><span class="line">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    fs.readFile(paths,(err,data)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">           res.status(400).json(&#123;</span><br><span class="line">               error:err.message</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;).listen(3004)</span><br></pre></td></tr></table></figure><p>获取文件类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const mime=require(&#x27;mime&#x27;)</span><br><span class="line">mime.getType(paths)</span><br></pre></td></tr></table></figure><h2 id="同步api-和异步-api"><a href="#同步api-和异步-api" class="headerlink" title="同步api 和异步 api"></a>同步api 和异步 api</h2><p>回调函数改变执行顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getData(cb)&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        cb(&#x27;hello world!&#x27;)</span><br><span class="line">    &#125;,3000)</span><br><span class="line">&#125;</span><br><span class="line">function cb(msg)&#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">getData(cb)</span><br></pre></td></tr></table></figure><p>利用promise依次读取三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&#x27;fs&#x27;)</span><br><span class="line">function p1()&#123;</span><br><span class="line">    return new Promise((resolve,resject)=&gt;&#123;</span><br><span class="line">        fs.readFile(&#x27;./txt1&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(data.toString())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function p2()&#123;</span><br><span class="line">    return new Promise((resolve,resject)=&gt;&#123;</span><br><span class="line">        fs.readFile(&#x27;./txt2&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(data.toString())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function p3()&#123;</span><br><span class="line">    return new Promise((resolve,resject)=&gt;&#123;</span><br><span class="line">        fs.readFile(&#x27;./txt3&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(data.toString())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">p1().then(r=&gt;&#123;</span><br><span class="line">    console.log(r);</span><br><span class="line">    return p2()</span><br><span class="line">&#125;).then(r=&gt;&#123;</span><br><span class="line">    console.log(r);</span><br><span class="line">    return p3()</span><br><span class="line">&#125;).then(r=&gt;&#123;</span><br><span class="line">    console.log(r);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>按顺序读取三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const fs=require(&#x27;fs&#x27;)</span><br><span class="line">const &#123;promisify&#125;=require(&#x27;util&#x27;)</span><br><span class="line">const readFile=promisify(fs.readFile)</span><br><span class="line">async function p()&#123;</span><br><span class="line">    let p1=await readFile(&#x27;./txt1&#x27;)</span><br><span class="line">    let p2=await readFile(&#x27;./txt2&#x27;)</span><br><span class="line">    let p3=await readFile(&#x27;./txt3&#x27;)</span><br><span class="line">    console.log(p1.toString());</span><br><span class="line">    console.log(p2.toString());</span><br><span class="line">    console.log(p3.toString());</span><br><span class="line">&#125;</span><br><span class="line">p()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;express-拿到form表单数据&quot;&gt;&lt;a href=&quot;#express-拿到form表单数据&quot; class=&quot;headerlink&quot; title=&quot;express 拿到form表单数据&quot;&gt;&lt;/a&gt;express 拿到form表单数据&lt;/h2&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://data.zz.baidu.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodejs基础（四）</title>
    <link href="http://data.zz.baidu.com/archives/cca10021.html"/>
    <id>http://data.zz.baidu.com/archives/cca10021.html</id>
    <published>2022-01-12T07:58:52.000Z</published>
    <updated>2022-01-13T10:44:30.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb数据库使用"><a href="#mongodb数据库使用" class="headerlink" title="mongodb数据库使用"></a>mongodb数据库使用</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const &#123;dbUrl&#125;=require(&#x27;../config/config.default&#x27;)</span><br><span class="line">const mongoose=require(&#x27;mongoose&#x27;)</span><br><span class="line">mongoose.connect(dbUrl).then(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据库连接失败&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">const Student=mongoose.model(&#x27;Student&#x27;,require(&#x27;./user&#x27;))</span><br></pre></td></tr></table></figure><p>user.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const mongoose=require(&#x27;mongoose&#x27;)</span><br><span class="line">const StudentSchema=new mongoose.Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        required:true</span><br><span class="line">    &#125;,</span><br><span class="line">    age:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        required:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">module.exports=StudentSchema</span><br></pre></td></tr></table></figure><p>config.default.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    dbUrl:&#x27;mongodb://localhost:27017/student&#x27;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const student=new Student(&#123; </span><br><span class="line">    name:`mingo`,</span><br><span class="line">    age:33</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">student.save()</span><br></pre></td></tr></table></figure><h3 id="创造文档"><a href="#创造文档" class="headerlink" title="创造文档"></a>创造文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student.create(&#123;name:&#x27;mingo&#x27;,age:33&#125;,(err,data)=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.find().then(res=&gt;console.log(res))</span><br><span class="line">Student.find(&#123;_id:&#x27;61df893146eebcae36b38397&#x27;&#125;).then(res=&gt;console.log(res))</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.update(&#123;&#x27;name&#x27;:&quot;mingo09&quot;&#125;,&#123;&#x27;name&#x27;:&#x27;mingo9&#x27;&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.findOneAndDelete(&#123;_id:&#x27;61df893146eebcae36b38397&#x27;&#125;).then(res=&gt;console.log(res))</span><br></pre></td></tr></table></figure><h3 id="MongoDB-条件操作符"><a href="#MongoDB-条件操作符" class="headerlink" title="MongoDB 条件操作符"></a>MongoDB 条件操作符</h3><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p><p>在本章节中，我们将讨论如何在MongoDB中使用条件操作符。</p><p>MongoDB中条件操作符有：</p><ul><li>(&gt;) 大于 - $gt</li><li>(&lt;) 小于 - $lt</li><li>(&gt;=) 大于等于 - $gte</li><li>(&lt;= ) 小于等于 - $lte</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mongodb数据库使用&quot;&gt;&lt;a href=&quot;#mongodb数据库使用&quot; class=&quot;headerlink&quot; title=&quot;mongodb数据库使用&quot;&gt;&lt;/a&gt;mongodb数据库使用&lt;/h2&gt;&lt;h3 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; c</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://data.zz.baidu.com/tags/nodejs/"/>
    
    <category term="mongodb" scheme="http://data.zz.baidu.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>nodejs基础（二）</title>
    <link href="http://data.zz.baidu.com/archives/8efd962c.html"/>
    <id>http://data.zz.baidu.com/archives/8efd962c.html</id>
    <published>2022-01-12T00:08:15.000Z</published>
    <updated>2022-01-13T10:43:35.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gulp使用"><a href="#Gulp使用" class="headerlink" title="Gulp使用"></a>Gulp使用</h2><p>扩展阅读 <a href="https://www.cnblogs.com/knyel/p/7826687.html">Gulp应用场景</a></p><h3 id="Gulp中提供的方法"><a href="#Gulp中提供的方法" class="headerlink" title="Gulp中提供的方法"></a>Gulp中提供的方法</h3><ul><li>gulp.src() 获取任务处理的文件</li><li>gulp.dest() 输出文件</li><li>gulp.task() 建立gulp任务</li><li>gulp.watch() 监控文件的变化</li></ul><h3 id="安装gulp-和gulp-cli"><a href="#安装gulp-和gulp-cli" class="headerlink" title="安装gulp 和gulp-cli"></a>安装gulp 和gulp-cli</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp</span><br><span class="line">npm i gulp-cli -g</span><br></pre></td></tr></table></figure><h3 id="gulp拷贝文件"><a href="#gulp拷贝文件" class="headerlink" title="gulp拷贝文件"></a>gulp拷贝文件</h3><p>将该目录<code>./src/css/base.css</code>中  <code>base.css</code>文件放入<code>dist/css</code>目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const gulp=require(&#x27;gulp&#x27;)</span><br><span class="line">gulp.task(&#x27;first&#x27;,async ()=&gt;&#123;</span><br><span class="line">    await gulp.src(&#x27;./src/css/base.css&#x27;)</span><br><span class="line">    .pipe(gulp.dest(&#x27;dist/css&#x27;))</span><br><span class="line">    console.log(&#x27;success&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;!-- 执行 node first --&gt;</span><br></pre></td></tr></table></figure><h3 id="No-gulpfile-found的解决办法"><a href="#No-gulpfile-found的解决办法" class="headerlink" title="No gulpfile found的解决办法"></a>No gulpfile found的解决办法</h3><p>在运行gulp命令时，遇到这个问题——No gulpfile found ，可以说这个问题是很基础的问题了。<br>问题出现的原因就是当时脑子一热，把本该有的gulpfile.js文件名改成其他名字了。<br>我们知道，放置所有的gulp命令都要自己建一个gulpfile.js文件，这个名字不能改，一旦改变，gulp 就找不到了。<br>所以还是得按规矩来办事。</p><h3 id="gulp-压缩html文件和抽取公共代码"><a href="#gulp-压缩html文件和抽取公共代码" class="headerlink" title="gulp 压缩html文件和抽取公共代码"></a>gulp 压缩html文件和抽取公共代码</h3><p>将<code>src</code>目录所有文件压缩并拷贝到<code>dist</code>目录下，拷贝之前先抽取公共代码<code>.pipe(fileinclude())</code><br>在文件中使用语法为<code>@@include(&#39;./common/footer.html&#39;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp-htmlmin gulp-file-include</span><br><span class="line">const htmlmin=require(&#x27;gulp-htmlmin&#x27;)</span><br><span class="line">const fileinclude=require(&#x27;gulp-file-include&#x27;)</span><br><span class="line">gulp.task(&#x27;htmlmin&#x27;,async ()=&gt;&#123;</span><br><span class="line">    await gulp.src(&#x27;./src/*.html&#x27;)</span><br><span class="line">    .pipe(fileinclude())</span><br><span class="line">    .pipe(htmlmin(&#123;collapseWhitespace:true&#125;))</span><br><span class="line">    .pipe(gulp.dest(&#x27;dist&#x27;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="gulp-转换less文件并压缩css文件"><a href="#gulp-转换less文件并压缩css文件" class="headerlink" title="gulp 转换less文件并压缩css文件"></a>gulp 转换less文件并压缩css文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp-less gulp-csso</span><br><span class="line">const less=require(&#x27;gulp-less&#x27;)</span><br><span class="line">const csso=require(&#x27;gulp-csso&#x27;)</span><br><span class="line">gulp.task(&#x27;cssmin&#x27;,async()=&gt;&#123;</span><br><span class="line">    await gulp.src([&#x27;./src/css/*.less&#x27;,&#x27;./src/css/*.css&#x27;])</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(csso())</span><br><span class="line">    .pipe(gulp.dest(&#x27;dist/css&#x27;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gulp-转换es6-并压缩"><a href="#gulp-转换es6-并压缩" class="headerlink" title="gulp 转换es6 并压缩"></a>gulp 转换es6 并压缩</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line">const babel = require(&#x27;gulp-babel&#x27;);</span><br><span class="line">const uglify=require(&#x27;gulp-uglify&#x27;)</span><br><span class="line">gulp.task(&#x27;jsmin&#x27;,async()=&gt;&#123;</span><br><span class="line">    gulp.src(&#x27;./src/js/*.js&#x27;)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [&#x27;@babel/env&#x27;]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(&#x27;dist/js&#x27;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="构建任务"><a href="#构建任务" class="headerlink" title="构建任务"></a>构建任务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&#x27;default&#x27;,[&#x27;htmlmin&#x27;,&#x27;cssmin&#x27;,&#x27;jsmin&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gulp使用&quot;&gt;&lt;a href=&quot;#Gulp使用&quot; class=&quot;headerlink&quot; title=&quot;Gulp使用&quot;&gt;&lt;/a&gt;Gulp使用&lt;/h2&gt;&lt;p&gt;扩展阅读 &lt;a href=&quot;https://www.cnblogs.com/knyel/p/7826687.</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://data.zz.baidu.com/tags/nodejs/"/>
    
    <category term="gulp" scheme="http://data.zz.baidu.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://data.zz.baidu.com/archives/6fa84f43.html"/>
    <id>http://data.zz.baidu.com/archives/6fa84f43.html</id>
    <published>2022-01-10T06:17:41.000Z</published>
    <updated>2022-01-11T10:14:45.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><p>SVN是subversion的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理，简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。</p><h2 id="Git-教程"><a href="#Git-教程" class="headerlink" title="Git 教程"></a>Git 教程</h2><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h3 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h3><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。<br>Git 与 SVN 区别点：</p><ol><li>Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li>Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li>Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li>Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li>Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><h2 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h2><ul><li>一般工作流程如下：</li><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><h2 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。<br>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。<br><strong>使用方法</strong><br>使用当前目录作为Git仓库，我们只需使它初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>该命令执行完后会在当前目录生成一个 .git 目录。<br>使用我们指定目录作为Git仓库。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add *.c</span><br><span class="line">git commit -m &#x27;初始化项目版本&#x27;</span><br></pre></td></tr></table></figure><h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。<br>有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。<br>创建分支命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。<br>合并分支命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge </span><br></pre></td></tr></table></figure><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除 testing 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testing</span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><h2 id="Git-查看提交历史"><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h2><p>Git 提交历史一般常用两个命令：</p><ul><li>git log - 查看历史提交记录。</li><li>git blame <file> - 以列表形式查看指定文件的历史修改记录。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SVN&quot;&gt;&lt;a href=&quot;#SVN&quot; class=&quot;headerlink&quot; title=&quot;SVN&quot;&gt;&lt;/a&gt;SVN&lt;/h2&gt;&lt;p&gt;SVN是subversion的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理，简而言之就是用于多个人共同开发同</summary>
      
    
    
    
    
    <category term="git" scheme="http://data.zz.baidu.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nodejs基础（一）</title>
    <link href="http://data.zz.baidu.com/archives/bad05100.html"/>
    <id>http://data.zz.baidu.com/archives/bad05100.html</id>
    <published>2022-01-10T01:20:24.000Z</published>
    <updated>2022-01-13T10:42:51.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>nodejs解析JS代码，提供系统级别API</p><h3 id="安装包-–save-dev-与–save-区别"><a href="#安装包-–save-dev-与–save-区别" class="headerlink" title="安装包 –save -dev 与–save 区别"></a>安装包 –save -dev 与–save 区别</h3><p>–save：将保存配置信息到pacjage.json。默认为dependencies节点中。<br>–dev：将保存配置信息devDependencies节点中。<br>因此：<br>–save：将保存配置信息到pacjage.json的dependencies节点中。<br>–save-dev：将保存配置信息到pacjage.json的devDependencies节点中。<br>dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块<br>devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它。</p><h3 id="将dependencies里包迁移到devDependencies"><a href="#将dependencies里包迁移到devDependencies" class="headerlink" title="将dependencies里包迁移到devDependencies"></a>将dependencies里包迁移到devDependencies</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp -D</span><br></pre></td></tr></table></figure><p><strong>tips:</strong> node_modules上传时可以删除，运行时执行 <strong>npm i</strong></p><h3 id="查看下载文件版本"><a href="#查看下载文件版本" class="headerlink" title="查看下载文件版本"></a>查看下载文件版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm view jquery versions</span><br><span class="line">[</span><br><span class="line">  &#x27;1.5.1&#x27;,        &#x27;1.6.2&#x27;,      &#x27;1.6.3&#x27;,        &#x27;1.7.2&#x27;,</span><br><span class="line">  &#x27;1.7.3&#x27;,        &#x27;1.8.2&#x27;,      &#x27;1.8.3&#x27;,        &#x27;1.9.1&#x27;,</span><br><span class="line">  &#x27;1.11.0-beta3&#x27;, &#x27;1.11.0-rc1&#x27;, &#x27;1.11.0&#x27;,       &#x27;1.11.1-beta1&#x27;,</span><br><span class="line">  &#x27;1.11.1-rc1&#x27;,   &#x27;1.11.1-rc2&#x27;, &#x27;1.11.1&#x27;,       &#x27;1.11.2&#x27;,</span><br><span class="line">  &#x27;1.11.3&#x27;,       &#x27;1.12.0&#x27;,     &#x27;1.12.1&#x27;,       &#x27;1.12.2&#x27;,</span><br><span class="line">  &#x27;1.12.3&#x27;,       &#x27;1.12.4&#x27;,     &#x27;2.1.0-beta2&#x27;,  &#x27;2.1.0-beta3&#x27;,</span><br><span class="line">  &#x27;2.1.0-rc1&#x27;,    &#x27;2.1.0&#x27;,      &#x27;2.1.1-beta1&#x27;,  &#x27;2.1.1-rc1&#x27;,</span><br><span class="line">  &#x27;2.1.1-rc2&#x27;,    &#x27;2.1.1&#x27;,      &#x27;2.1.2&#x27;,        &#x27;2.1.3&#x27;,</span><br><span class="line">  &#x27;2.1.4&#x27;,        &#x27;2.2.0&#x27;,      &#x27;2.2.1&#x27;,        &#x27;2.2.2&#x27;,</span><br><span class="line">  &#x27;2.2.3&#x27;,        &#x27;2.2.4&#x27;,      &#x27;3.0.0-alpha1&#x27;, &#x27;3.0.0-beta1&#x27;,</span><br><span class="line">  &#x27;3.0.0-rc1&#x27;,    &#x27;3.0.0&#x27;,      &#x27;3.1.0&#x27;,        &#x27;3.1.1&#x27;,</span><br><span class="line">  &#x27;3.2.0&#x27;,        &#x27;3.2.1&#x27;,      &#x27;3.3.0&#x27;,        &#x27;3.3.1&#x27;,</span><br><span class="line">  &#x27;3.4.0&#x27;,        &#x27;3.4.1&#x27;,      &#x27;3.5.0&#x27;,        &#x27;3.5.1&#x27;,</span><br><span class="line">  &#x27;3.6.0&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>npm i jquery@3.6.0</code> 安装指定版本<br>版本号<strong>3.6.0</strong> , <strong>3</strong> 代表大版本，<strong>6</strong> 代表小版本，<strong>0</strong>  代表补丁，偶数是稳定的。<br>package.json包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;md5&quot;: &quot;^2.3.0&quot;,</span><br><span class="line">  &quot;silly-datetime&quot;: &quot;^0.1.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>^</code>表示第一位版本号不变，后两位取最新<br><code>~</code>表示前两位不变，最后一位取最新<br><code>*</code>表示全部取最新</p><h2 id="创建web服务"><a href="#创建web服务" class="headerlink" title="创建web服务"></a>创建web服务</h2><p>用node搭建一个简易的服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const http=requrie(&#x27;http&#x27;)</span><br><span class="line">const app=http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    res.writeHead(200,&#123;&quot;Content-type&quot;:&quot;text/html;charset=utf-8&quot;&#125;)</span><br><span class="line">    res.write(&quot;&lt;h2&gt;云在青天水在瓶&lt;/h2&gt;&quot;)</span><br><span class="line">    res.write(&quot;nodejs&quot;)</span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;server is on&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在浏览器中即可显示<br><strong>云在青天水在瓶</strong><br>nodejs</p><h3 id="url模块使用"><a href="#url模块使用" class="headerlink" title="url模块使用"></a>url模块使用</h3><p>服务器中url解析方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const url=require(&#x27;url&#x27;)</span><br><span class="line">const api=&quot;http://localhost:3000/?username=lisi&amp;age=34&quot;</span><br><span class="line">const user=url.parse(api,true).query</span><br><span class="line">console.log(`username:$&#123;user.username&#125;---age:$&#123;user.age&#125;`);</span><br></pre></td></tr></table></figure><h3 id="common-js的使用"><a href="#common-js的使用" class="headerlink" title="common.js的使用"></a>common.js的使用</h3><p>可以参考这篇文章 <a href="https://zhuanlan.zhihu.com/p/113009496">前端科普系列-CommonJS：不是前端却革命了前端</a></p><h2 id="fs模块学习"><a href="#fs模块学习" class="headerlink" title="fs模块学习"></a>fs模块学习</h2><h3 id="检查是目录还是文件"><a href="#检查是目录还是文件" class="headerlink" title="检查是目录还是文件"></a>检查是目录还是文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(&#x27;./app.js&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data.isFile()); //是文件 true</span><br><span class="line">    console.log(data.isDirectory());//是目录 false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(&#x27;./css&#x27;,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;创建成功&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建-amp-amp-写入文件-文件不存在：创建并替换内容。文件存在：替换内容。"><a href="#创建-amp-amp-写入文件-文件不存在：创建并替换内容。文件存在：替换内容。" class="headerlink" title="创建&amp;&amp;写入文件,文件不存在：创建并替换内容。文件存在：替换内容。"></a>创建&amp;&amp;写入文件,文件不存在：创建并替换内容。文件存在：替换内容。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&#x27;./txt&#x27;,&quot;nodejs&quot;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;创建写入文件成功&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建-amp-amp-写入文件-文件不存在：创建并添加内容。文件存在：添加内容。"><a href="#创建-amp-amp-写入文件-文件不存在：创建并添加内容。文件存在：添加内容。" class="headerlink" title="创建&amp;&amp;写入文件,文件不存在：创建并添加内容。文件存在：添加内容。"></a>创建&amp;&amp;写入文件,文件不存在：创建并添加内容。文件存在：添加内容。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFile(&#x27;./txt&#x27;,&quot;good good study\n&quot;,err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;创建写入文件成功&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="读写文件内容"><a href="#读写文件内容" class="headerlink" title="读写文件内容"></a>读写文件内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&#x27;./ee/txt&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(&#x27;../node-primary&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(&quot;./txt&quot;,&quot;./test&quot;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdir(&#x27;./css&#x27;,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;删除目录成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(&#x27;./txt1&#x27;,(err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;删除文件成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="从文件流中读取数据"><a href="#从文件流中读取数据" class="headerlink" title="从文件流中读取数据"></a>从文件流中读取数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const readStream=fs.createReadStream(&#x27;./txt3&#x27;)</span><br><span class="line">let count=0,str=&#x27;&#x27;</span><br><span class="line">readStream.on(&#x27;data&#x27;,data=&gt;&#123;</span><br><span class="line">    str+=data</span><br><span class="line">    count++</span><br><span class="line">&#125;)</span><br><span class="line">readStream.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class="line">    console.log(count);</span><br><span class="line">&#125;)</span><br><span class="line">readStream.on(&#x27;error&#x27;,(error)=&gt;&#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="系统模块path-路径操作"><a href="#系统模块path-路径操作" class="headerlink" title="系统模块path 路径操作"></a>系统模块path 路径操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const path=require(&#x27;path&#x27;)</span><br><span class="line">const finalPath=path.join(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br><span class="line">console.log(finalPath); //a\b\c</span><br></pre></td></tr></table></figure><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const path=require(&#x27;path&#x27;)</span><br><span class="line">const finalPath=path.join(__dirname,&#x27;08-path.js&#x27;)</span><br><span class="line">console.log(finalPath); //E:\frontend\node\node-primary\08-path.js</span><br></pre></td></tr></table></figure><p>__dirname获取当前文件所在的绝对路径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;p&gt;nodejs解析JS代码，提供系统级别API&lt;/p&gt;
&lt;h3 id=&quot;安装包-–save-dev-与–save-区别&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://data.zz.baidu.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>使用picgo+github搭建免费个人图床</title>
    <link href="http://data.zz.baidu.com/archives/5452916e.html"/>
    <id>http://data.zz.baidu.com/archives/5452916e.html</id>
    <published>2022-01-09T10:30:55.000Z</published>
    <updated>2022-01-10T15:25:46.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PicGo安装及配置"><a href="#PicGo安装及配置" class="headerlink" title="PicGo安装及配置"></a>PicGo安装及配置</h2><ol><li>github下载PicGo并安装 <a href="https://github.com/Molunerfinn/PicGo/releases">下载地址</a></li><li>新建github仓库用来存储图片</li><li>PicGo中图床设置中填写信息</li></ol><ul><li>token可以在<code>Settings /Developer settings</code>中设置，注意勾选<strong>repo</strong>,点击 <code>Generate token</code></li><li>设定自定义域名 <code>https://cdn.jsdelivr.net/gh/</code>加上设定仓库名（<code>liuming20200820/picgo_demo</code>）。点击确定即完成了。</li></ul><h2 id="解决-Github-图片加载慢的问题"><a href="#解决-Github-图片加载慢的问题" class="headerlink" title="解决 Github 图片加载慢的问题"></a>解决 Github 图片加载慢的问题</h2><p>使用 Github 作为图床，每次打开博客时的图片加载很慢或者根本加载不出来。这是因为 GitHub 的 CDN 被某墙屏蔽了，由于网络代理商的原因，所以访问下载很慢。</p><h3 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h3><p>目的：绕过 DNS 解析，直接在本地绑定 host。<br>思路：直接修改本地的 hosts 文件。<br>实现：</p><ol><li>前往 C:\Windows\System32\drivers\etc 目录</li><li>以记事本方式打开该目录下的 hosts 文件，在最末位置添加如下代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#52.69.186.44 github.com</span><br><span class="line">#199.232.69.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><code>52.69.186.44</code>这个 IP 地址需要修改成你的 IP 地址，点击<a href="https://www.ipaddress.com/what-is-my-ip-address/">What Is My IP</a>，即可找到你的 IP 地址。<br><code>199.232.69.194</code>这个 IP 地址需要修改为 GitHub 的 IP 地址，点击 <a href="https://ipaddress.com/website/github.global.ssl.fastly.net">这里</a>，即可找到。</li><li>最后添加并保存之后，我们再使用 win+R 输入 cmd 进入控制台，输入指令ipconfig /flushdns刷新 DNS。</li></ol><p>重启浏览器，大功告成。(最后发现其实没有什么软用&gt;_&lt;)<br><img src="https://cdn.jsdelivr.net/gh/iuming20200820/picgo_demo/img/c97b75f2b7ed1ff5c635e125bf9011674e635a7c.jpg@400w_250h_1c.webp"><br><img src="https://cdn.jsdelivr.net/gh/liuming20200820/picgo_demo/img/avatar.webp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PicGo安装及配置&quot;&gt;&lt;a href=&quot;#PicGo安装及配置&quot; class=&quot;headerlink&quot; title=&quot;PicGo安装及配置&quot;&gt;&lt;/a&gt;PicGo安装及配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;github下载PicGo并安装 &lt;a href=&quot;https:</summary>
      
    
    
    
    
    <category term="github图床" scheme="http://data.zz.baidu.com/tags/github%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客|gulp压缩</title>
    <link href="http://data.zz.baidu.com/archives/247115af.html"/>
    <id>http://data.zz.baidu.com/archives/247115af.html</id>
    <published>2022-01-09T09:15:35.000Z</published>
    <updated>2022-01-10T14:59:40.995Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i --global gulp-cli</span><br><span class="line">npm i gulp -g</span><br><span class="line">npm i gulp-htmlclean --save-dev</span><br><span class="line">npm i --save gulp-html-minifier-terser</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="gulp压缩代码" scheme="http://data.zz.baidu.com/tags/gulp%E5%8E%8B%E7%BC%A9%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客之butterfly主题优雅魔改</title>
    <link href="http://data.zz.baidu.com/archives/7527d40f.html"/>
    <id>http://data.zz.baidu.com/archives/7527d40f.html</id>
    <published>2022-01-09T07:04:01.000Z</published>
    <updated>2022-01-10T15:00:16.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-CSS如何引用"><a href="#JS-CSS如何引用" class="headerlink" title="JS/CSS如何引用"></a>JS/CSS如何引用</h2><ol><li>打开主题配置文件（butterfly.yml）</li><li>定位搜索 inject</li><li>其中head是用来引入css的。bottom是用来引入js的。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-CSS如何引用&quot;&gt;&lt;a href=&quot;#JS-CSS如何引用&quot; class=&quot;headerlink&quot; title=&quot;JS/CSS如何引用&quot;&gt;&lt;/a&gt;JS/CSS如何引用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;打开主题配置文件（butterfly.yml）&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://data.zz.baidu.com/tags/hexo/"/>
    
    <category term="butterfly" scheme="http://data.zz.baidu.com/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>搭建blog高级操作</title>
    <link href="http://data.zz.baidu.com/archives/26d09be9.html"/>
    <id>http://data.zz.baidu.com/archives/26d09be9.html</id>
    <published>2022-01-08T14:53:30.000Z</published>
    <updated>2022-01-10T15:01:33.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。<br>别号： quote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><h4 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h4 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><strong>普通的代码块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:css %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[rectangle setX: 10 y: 10 width: 20 height: 20]</span>;</span><br></pre></td></tr></table></figure><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p>资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。<br><img src="/images/dus.jpg"><br>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 source/_data 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。<br>举例来说，在 source/_data 文件夹中新建 menu.yml 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Home: /</span><br><span class="line">Gallery: /gallery/</span><br><span class="line">Archives: /archives/</span><br></pre></td></tr></table></figure><p>您就能在模板中使用这些资料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.data.links)&#123; %&gt;</span><br><span class="line">  &lt;div class=&quot;widget tag&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;title&quot;&gt;友情链接&lt;/h3&gt;</span><br><span class="line">      &lt;ul class=&quot;entry&quot;&gt;</span><br><span class="line">        &lt;% for (var i in site.data.links)&#123; %&gt;</span><br><span class="line">          &lt;li class=&#x27;link&#x27;&gt;&lt;a href=&#x27;&lt;%- site.data.links[i] %&gt;&#x27;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="创建Tags"><a href="#创建Tags" class="headerlink" title="创建Tags"></a>创建Tags</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>打开 <code>source/tags/index.md</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-01-09 11:13:34</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>打开 <code>themes/butterfly/config.yml</code>找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将menu注释去掉</span><br><span class="line">menu:</span><br><span class="line">  Home: / || fas fa-home</span><br><span class="line">  Archives: /archives/ || fas fa-archive</span><br><span class="line">  Tags: /tags/ || fas fa-tags</span><br></pre></td></tr></table></figure><p>给每篇文章加上tags属性即可在tags中找到相应文章<br>创建categories与tags相类似</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;p&gt;在文章中插入引言，可包含作者、来源和标题。&lt;br&gt;别号： quote&lt;/p&gt;
&lt;figure class=&quot;highlight pl</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://data.zz.baidu.com/tags/hexo/"/>
    
    <category term="blog搭建" scheme="http://data.zz.baidu.com/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>用hexo 搭建博客</title>
    <link href="http://data.zz.baidu.com/archives/7f7acb96.html"/>
    <id>http://data.zz.baidu.com/archives/7f7acb96.html</id>
    <published>2022-01-08T11:11:50.000Z</published>
    <updated>2022-01-10T15:11:56.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="https://nodejs.org/en/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;6.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题 文件夹。Hexo 会根据主题来生成静态页面。<br>修改主题：<br>下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">or</span><br><span class="line">npm i hexo-theme-butterfly</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改本地配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml文件下</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h2 id="Hexo部署博客到Github和Coding"><a href="#Hexo部署博客到Github和Coding" class="headerlink" title="Hexo部署博客到Github和Coding"></a>Hexo部署博客到Github和Coding</h2><h4 id="Github和Coding又是什么？"><a href="#Github和Coding又是什么？" class="headerlink" title="Github和Coding又是什么？"></a>Github和Coding又是什么？</h4><ul><li>Github是国外免费的Git代码托管平台。利用Github Page服务可以免费创建一个静态网站。</li><li>Coding则是国内Git代码托管平台。国内首个Git代码托管平台GitCafe已被Coding收购。也提供page服务</li></ul><h4 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h4><ul><li>输入hexo s 启动博客<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li><li>打开浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可访问</li></ul><h4 id="将博客托管到Github和Coding上"><a href="#将博客托管到Github和Coding上" class="headerlink" title="将博客托管到Github和Coding上"></a>将博客托管到Github和Coding上</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git --save</span><br><span class="line">修改_config.yml配置文件</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/liuming20200820/liuming20200820.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">hexo g 生成静态网页</span><br><span class="line">hexo d 开始部署</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hexo？&quot;&gt;&lt;/a&gt;什么是 Hexo？&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;htt</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://data.zz.baidu.com/tags/hexo/"/>
    
    <category term="blog搭建" scheme="http://data.zz.baidu.com/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章，Markdown 语法</title>
    <link href="http://data.zz.baidu.com/archives/6f7eae34.html"/>
    <id>http://data.zz.baidu.com/archives/6f7eae34.html</id>
    <published>2022-01-07T11:49:19.000Z</published>
    <updated>2022-01-10T15:09:57.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/liuming20200820/picgo_demo/img/202201102252786.png"></p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>示例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#x27;&#x27;图片title&#x27;&#x27;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://github.com/liuming20200820/picgo_demo/blob/main/img/dus.webp" alt="示例图片" title="区块链"></p><h4 id="上传本地图片直接点击导航栏的图片标志，选择图片即可"><a href="#上传本地图片直接点击导航栏的图片标志，选择图片即可" class="headerlink" title="上传本地图片直接点击导航栏的图片标志，选择图片即可"></a>上传本地图片直接点击导航栏的图片标志，选择图片即可</h4><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度](http://baidu.com)</span><br><span class="line">[淘宝](https://ai.taobao.com)</span><br></pre></td></tr></table></figure><p><a href="http://baidu.com/">百度</a><br><a href="https://ai.taobao.com/">淘宝</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>语法：<br>数字加点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><h4 id="上一级和下一级之间敲三个空格即可"><a href="#上一级和下一级之间敲三个空格即可" class="headerlink" title="上一级和下一级之间敲三个空格即可"></a>上一级和下一级之间敲三个空格即可</h4><ul><li><p>一级无序列表内容   </p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表内容</p><ol><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ol></li></ul><ol><li><p>一级无序列表内容   </p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表内容</p><ol><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ol></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure><p>显示结果如下：<br><code>printf()</code> 函数</p><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#x27;RUNOOB&#x27;);</span><br><span class="line">&#125;);```</span><br></pre></td></tr></table></figure><p>javascript<br>$(document).ready(function () {<br>    alert(‘RUNOOB’);<br>});</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h4 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure><p> <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd></p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p><strong>Markdown Preview Enhanced</strong> 使用 <a href="https://github.com/mathjax/MathJax">KaTeX</a> 或者 <a href="https://github.com/KaTeX/KaTeX">MathJax</a> 来渲染数学表达式。</p><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。<br>默认下的分隔符：</p><ul><li>$…$ 或者 (…) 中的数学表达式将会在行内显示。</li><li>$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line">@VbVV @AAcA \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>输出结果为：<br>$$<br>\begin{Bmatrix}<br>   a &amp; b \<br>   c &amp; d<br>\end{Bmatrix}<br>$$<br>$$<br>\begin{CD}<br>   A @&gt;a&gt;&gt; B \<br>@VbVV @AAcA \<br>   C @= D<br>\end{CD}<br>$$<br>????未知错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://data.zz.baidu.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
